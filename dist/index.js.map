{"version":3,"file":"index.js","sources":["../src/city/sources/maximumCreepsPerSource.ts","../src/city/spawners/harvester.ts","../src/city/spawners/index.ts","../src/city/roles/harvester.ts","../src/city/index.ts","../src/index.ts"],"sourcesContent":["export const maximumCreepsPerSource = (source: Source) => {\n  const { pos, room } = source\n\n  const terrain = new (Room as any).Terrain(room.name) as any\n\n  let max = 0\n\n  if (terrain.get(pos.x - 1, pos.y -1) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x - 1, pos.y) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x - 1, pos.y + 1) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x, pos.y - 1) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x, pos.y + 1) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x + 1, pos.y - 1) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x + 1, pos.y) !== TERRAIN_MASK_WALL) max += 1\n  if (terrain.get(pos.x + 1, pos.y + 1) !== TERRAIN_MASK_WALL) max += 1\n\n  return max\n}\n","import { maximumCreepsPerSource } from \"city/sources/maximumCreepsPerSource\"\n\nconst workBodies = Array(1).fill(WORK) as (typeof WORK)[]\nconst carryBodies = Array(1).fill(CARRY) as (typeof CARRY)[]\nconst moveBodies = Array(1).fill(MOVE) as (typeof MOVE)[]\n\nconst shouldSpawn = (spawn: Spawn) => {\n  const hasEnoughEnergy = spawn.energy >= 200\n  let sourcesMaxEnergyPerTick = 0\n  let sourcesMaximumHarvesters = 0\n\n  const roomSources = spawn.room.find<Source>(FIND_SOURCES)\n\n  for (const source of Object.values(roomSources)) {\n    sourcesMaxEnergyPerTick += source.energyCapacity / ENERGY_REGEN_TIME\n    sourcesMaximumHarvesters += maximumCreepsPerSource(source)\n  }\n\n  const spawnHarvestMaxEnergyPerTick = spawn.memory.harvesterCapacityPerTick || 0;\n  const spawnHarvestNumber = spawn.memory.harvesterIndex || 0;\n\n  // we have enough energy to build it\n  // and we don't harvest more than the source can restore\n  return hasEnoughEnergy &&\n    sourcesMaxEnergyPerTick > spawnHarvestMaxEnergyPerTick &&\n    sourcesMaximumHarvesters > spawnHarvestNumber\n}\n\nexport const harvester = (spawn: Spawn) => {\n  if (shouldSpawn(spawn)) {\n    const harvesterIndex = spawn.memory.harvesterIndex || 0\n\n    const err = spawn.spawnCreep(\n      [ ...workBodies, ...carryBodies, ...moveBodies ],\n      `screeps-ai/${spawn.name}/harvester/${harvesterIndex}`,\n      { memory: { role: 'harvester', spawn }}\n    )\n\n    if (!err) {\n      spawn.memory.harvesterIndex = harvesterIndex + 1\n      spawn.memory.harvesterCapacityPerTick = (spawn.memory.harvesterCapacityPerTick || 0) + HARVEST_POWER * workBodies.length;\n    } else {\n      console.log('Can not spawn harvester: ', err)\n    }\n  }\n}\n","import { harvester } from './harvester'\n\nexport const spawners = (spawn: Spawn) => {\n  harvester(spawn)\n}\n","export const harvester = (creep: Creep, spawn: Spawn) => {\n  if (typeof creep.carry.energy === 'undefined') {\n    return\n  }\n\n  if (creep.carry.energy < creep.carryCapacity) {\n    creep.say(`harvest`)\n    const sources = spawn.room.find<Source>(FIND_SOURCES)\n\n    if (!sources[0]) {\n      creep.suicide()\n      return\n    }\n\n    const err = creep.harvest(sources[0])\n\n    if (err === ERR_NOT_IN_RANGE) {\n      creep.moveTo(sources[0], {\n        visualizePathStyle: {\n          stroke: '#ff0000'\n        }\n      })\n    }\n  } else {\n    creep.say('bringback')\n    const err = creep.transfer(spawn, RESOURCE_ENERGY);\n\n    if (err === ERR_NOT_IN_RANGE) {\n      creep.moveTo(spawn, {\n        visualizePathStyle: {\n          stroke: '#ff0000'\n        }\n      })\n    }\n  }\n}\n","import { spawners } from './spawners/index'\nimport { harvester } from './roles/harvester'\n\nexport const city = (spawn: Spawn) => {\n  // TODO: initialize room (serialize paths, find sources, etc.)\n\n  spawners(spawn)\n\n  const creeps = spawn.room.find<Creep>(FIND_MY_CREEPS)\n\n  for (const creep of Object.values(creeps)) {\n    if (creep.memory.role === 'harvester') harvester(creep, spawn)\n  }\n}\n","import { city } from './city/index'\n\nexport const loop = () => {\n  Memory.creeps = Memory.creeps || {}\n\n  for (const creepName of Object.keys(Memory.creeps)) {\n    if (!Game.creeps[creepName]) {\n      delete Memory.creeps[creepName]\n    }\n  }\n\n  for (const spawnName of Object.keys(Game.spawns)) {\n    city(Game.spawns[spawnName])\n  }\n}\n"],"names":["harvester"],"mappings":"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"}